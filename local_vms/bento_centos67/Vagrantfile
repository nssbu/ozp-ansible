# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "bento/centos-6.7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 8443, host: 8443
  config.vm.network "forwarded_port", guest: 4444, host: 4440
  config.vm.network "forwarded_port", guest: 2222, host: 22

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "10.0.0.2"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  #config.vm.synced_folder "/Users/Bob/ozp/ozp-ansible", "/ozp-ansible"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  #
  #config.vm.provision "ansible" do |ansible|
  #  ansible.playbook = "site.yml"
  #  ansible.extra_vars = {
  #    site_fqdn: OZP_FQDN,
  #    db_fqdn: OZP_FQDN,
  #    redis_fqdn: OZP_FQDN,
  #    auth_fqdn: OZP_FQDN,
  #    image_fqdn: OZP_FQDN,
  #    api_fqdn: OZP_FQDN,
  #    frontend_fqdn: OZP_FQDN
  #  }
  #end
  
  config.vm.provision "shell", inline: <<-SHELL
    sudo yum --disablerepo=epel -y update ca-certificates
    sudo yum install -y epel-release
    sudo yum install -y python-pip
    #sudo su -
    #cd /opt
    #wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz"
    #tar xzf jdk-8u151-linux-x64.tar.gz
    #cd /opt/jdk1.8.0_151/
    #alternatives --install /usr/bin/java java /opt/jdk1.8.0_151/bin/java 2
    #alternatives --set java /opt/jdk1.8.0_151/bin/java
    #alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_151/bin/jar 2
    #alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_151/bin/javac 2
    #alternatives --set jar /opt/jdk1.8.0_151/bin/jar
    #alternatives --set javac /opt/jdk1.8.0_151/bin/javac
    #export JAVA_HOME=/opt/jdk1.8.0_151
    #export JRE_HOME=/opt/jdk1.8.0_151/jre
    #export PATH=$PATH:/opt/jdk1.8.0_151/bin:/opt/jdk1.8.0_151/jre/bin
    #touch /etc/profile.d/set_java_env_vars.sh
    #echo JAVA_HOME=/opt/jdk1.8.0_151 >> /etc/profile.d/set_java_env_vars.sh
    #echo JRE_HOME=/opt/jdk1.8.0_151/jre  >> /etc/profile.d/set_java_env_vars.sh
    #echo 'PATH=$PATH:/opt/jdk1.8.0_151/bin:/opt/jdk1.8.0_151/jre/bin' >> /etc/profile.d/set_java_env_vars.sh
  SHELL
end
